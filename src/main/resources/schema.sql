DROP TABLE IF EXISTS friendship;
CREATE TABLE friendship (
  user1_id integer,
  user2_id integer,
  confirmed bool,
  PRIMARY KEY (user1_id, user2_id)
);

DROP TABLE IF EXISTS film_like;
CREATE TABLE film_like (
  film_id integer,
  user_id integer,
  PRIMARY KEY (film_id, user_id)
);


DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email varchar,
  login varchar,
  user_name varchar,
  birthday date,
  created_at date
);

DROP TABLE IF EXISTS film_genre;
CREATE TABLE film_genre (
  film_id integer,
  genre_id integer,
  PRIMARY KEY (film_id, genre_id)
);

DROP TABLE IF EXISTS genre;
CREATE TABLE genre (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name_genre varchar
);

DROP TABLE IF EXISTS film;
CREATE TABLE film (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name_film varchar,
  description varchar,
  release_date date,
  duration integer,
  rating_id integer
);

DROP TABLE IF EXISTS rating;
CREATE TABLE rating (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name_rating varchar,
  description varchar
);

ALTER TABLE friendship ADD FOREIGN KEY (user1_id) REFERENCES users (id);

ALTER TABLE friendship ADD FOREIGN KEY (user2_id) REFERENCES users (id);

ALTER TABLE film ADD FOREIGN KEY (rating_id) REFERENCES rating (id);

ALTER TABLE film_like ADD FOREIGN KEY (film_id) REFERENCES film (id);

ALTER TABLE film_like ADD FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE film_genre ADD FOREIGN KEY (film_id) REFERENCES film (id);

ALTER TABLE film_genre ADD FOREIGN KEY (genre_id) REFERENCES genre (id);
